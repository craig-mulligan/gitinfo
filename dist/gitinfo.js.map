{"version":3,"sources":["gitinfo.js"],"names":[],"mappings":"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","file":"gitinfo.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport utils from './utils';\n\n/**\n * @typedef config\n * @property {string} gitPath Path to the .git directory (default: __dirname).\n */\n\n/**\n * @param {config} config\n * @returns {Object}\n */\nexport default (config = {}) => {\n    let gitPath,\n        gitinfo;\n\n    config.gitPath = config.gitPath || __dirname;\n\n    gitinfo = {};\n\n    /**\n     * @return {string} Repository URL.\n     */\n    gitinfo.url = () => {\n        return 'https://github.com/' + gitinfo.username() + '/' + gitinfo.name();\n    };\n\n    /**\n     * Gets name of the current branch.\n     *\n     * @see http://stackoverflow.com/a/12142066/368691\n     * @return {string}\n     */\n    gitinfo.branch = () => {\n        let branch,\n            head,\n            name;\n\n        name = gitPath + '/HEAD';\n\n        if (!fs.existsSync(name)) {\n            throw new Error('Git HEAD (\"' + name + '\") does not exist.');\n        }\n\n        head = fs.readFileSync(name, {encoding: 'utf8'});\n\n        branch = head.match(/^ref: refs\\/heads\\/(.*)$/m);\n\n        if (!branch) {\n            throw new Error('Cannot get the current branch name.');\n        }\n\n        return branch[1];\n    };\n\n    /**\n     * Get the remote URL of the current branch.\n     *\n     * @return {string}\n     */\n    gitinfo.remoteURL = () => {\n        let branch,\n            branchName,\n            config,\n            remote;\n\n        branchName = gitinfo.branch();\n        config = gitinfo.config();\n\n        branch = config['branch \"' + branchName + '\"'];\n\n        if (!branch) {\n            throw new Error('Branch (\"' + branchName + '\") definition does not exist in the config.');\n        } else if (!branch.remote) {\n            throw new Error('Branch (\"' + branchName + '\") does not define \"remote\".');\n        }\n\n        remote = config['remote \"' + branch.remote + '\"'];\n\n        if (!remote) {\n            throw new Error('Remote (\"' + branch.remote + '\") definition does not exist in the config.');\n        } else if (!remote.url) {\n            throw new Error('Remote (\"' + branch.remote + '\") does not define \"url\".');\n        }\n\n        return remote.url;\n    };\n\n    /**\n     * @return {string} Absolute path to the .git/ directory.\n     */\n    gitinfo.gitPath = () => {\n        return gitPath;\n    };\n\n    /**\n     * @return {string} Username of the repository author.\n     */\n    gitinfo.username = () => {\n        return utils.parseRemoteOriginURL(gitinfo.remoteURL()).username;\n    };\n\n    /**\n     * @return {string} Repository name.\n     */\n    gitinfo.name = () => {\n        return utils.parseRemoteOriginURL(gitinfo.remoteURL()).name;\n    };\n\n    /**\n     * @returns {string} Commit SHA of the current branch\n     */\n    gitinfo.sha = () => {\n        let branch,\n            sha,\n            shaFile;\n\n        branch = gitinfo.branch();\n        shaFile = path.join(gitPath, 'refs', 'heads', branch);\n\n        try {\n            sha = fs.readFileSync(shaFile, {encoding: 'utf8'});\n        } catch (err) {\n            throw new Error('Cannot read the commit SHA of the current HEAD from the ' + shaFile + '.\\n' + err);\n        }\n        return utils.trim(sha);\n    };\n\n    /**\n     * Get object representation of the .git/config file.\n     *\n     * @returns {Object}\n     */\n    gitinfo.config = () => {\n        return utils.parseINI(gitPath + '/config');\n    };\n\n    if (utils.isGitDirectory(config.gitPath)) {\n        gitPath = config.gitPath;\n    } else {\n        gitPath = utils.gitPath(config.gitPath);\n    }\n\n    if (!gitPath) {\n        throw new Error('config.gitPath is not a descendant of .git/ director.');\n    }\n\n    return gitinfo;\n};\n"],"sourceRoot":"/source/"}