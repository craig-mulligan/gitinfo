{"version":3,"sources":["utils.js"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import fs from 'fs';\nimport ini from 'ini';\nimport URL from 'url';\n\nlet utils;\n\nutils = {};\n\n/**\n * Read INI file into an object.\n *\n * @access protected\n * @param {string} name\n * @returns {Object}\n */\nutils.parseINI = (name) => {\n    let config;\n\n    if (!fs.existsSync(name)) {\n        throw new Error('INI file (\"' + name + '\") does not exist.');\n    }\n\n    config = fs.readFileSync(name, {encoding: 'utf8'});\n    config = ini.parse(config);\n\n    return config;\n};\n\n/**\n * @access protected\n * @param {string} input Supported Git remote origin URL (https, git or SVN).\n * @returns {Object} repository\n * @returns {string} repository.username\n * @returns {string} repository.name\n */\nutils.parseRemoteOriginURL = (input) => {\n    let url;\n\n    // git@github.com:gajus/gitdown.git\n    // https://github.com/gajus/gitdown.git\n    // https://github.com/gajus/gitdown\n\n    if (input.indexOf('com:') !== -1) {\n        url = input.split('com:')[1];\n    } else {\n        url = URL.parse(input).path.slice(1);\n    }\n\n    if (/\\.git$/.test(url)) {\n        url = url.slice(0, -4);\n    }\n\n    url = url.split('/');\n\n    if (url.length !== 2) {\n        throw new Error('Invalid remote origin URL (\"' + input + '\").');\n    }\n\n    return {\n        username: url[0],\n        name: url[1]\n    };\n};\n\n/**\n * @access protected\n * @param {string} path\n * @returns {boolean}\n */\nutils.isGitDirectory = (path) => {\n    try {\n        fs.statSync(path + '/HEAD');\n        fs.statSync(path + '/objects');\n        fs.statSync(path + '/refs');\n        fs.statSync(path + '/config');\n\n        return true;\n    } catch (error) {\n        return false;\n    }\n};\n\n/**\n * Ascend the system's file tree looking for .git/ directory.\n *\n * @access protected\n * @param {string} startPath The path where start the search.\n * @returns {string}\n */\nutils.gitPath = (startPath) => {\n    let dirname,\n        gitpath;\n\n    gitpath = false;\n\n    dirname = startPath;\n\n    do {\n        if (fs.existsSync(dirname + '/.git')) {\n            gitpath = dirname + '/.git';\n\n            break;\n        }\n\n        dirname = fs.realpathSync(dirname + '/..');\n    } while (fs.existsSync(dirname) && dirname !== '/');\n\n    return gitpath;\n};\n\n/**\n * @param {string} string A string to be trimmed\n * @returns {string} An initial string without leading and trailing spaces, tabs, newlines\n */\nutils.trim = (string) => {\n    return string.replace(/^\\s+|\\s+$/g, '');\n};\n\nmodule.exports = utils;\n"],"sourceRoot":"/source/"}